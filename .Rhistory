ss_tot <- sum((observed - mean(observed)) ^ 2)
r_squared <- 1 - (ss_res / ss_tot)
metrics = data.frame(RMSE = rmse,
MAE = mae,
R_square = r_squared)
data <- data.frame(
Actual = observed,
Predicted = predicted
)
# Fit a linear regression model
model <- lm(Actual ~ Predicted, data = data)
# Regression plot
p1 <- ggplot(data, aes(x = Predicted, y = Actual)) +
geom_point(color = 'blue', size = 2, alpha = 0.6) +  # Scatter plot
geom_smooth(method = 'lm', color = 'red', se = FALSE, linetype = "dashed") +  # Regression line
labs(title = 'Regression Plot', x = 'Predicted Values', y = 'Actual Values') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.8,
label = paste("RMSE:", round(rmse, 2)), color = "black", size = 4, hjust = 0) +
annotate("text", x = max(data$Predicted) * 0.2, y = max(data$Actual) * 0.7,
label = paste("R-squared:", round(r_squared, 3)), color = "black", size = 4, hjust = 0)
print(p1)
# Residuals analysis
data$residuals <- residuals(model)
p2 <- ggplot(data, aes(x = Predicted, y = residuals)) +
geom_point(color = 'green', alpha = 0.6, size = 2) +  # Residuals scatter plot
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at y=0
labs(title = 'Residuals Plot', x = 'Predicted Values', y = 'Residuals') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
scale_y_continuous(limits = c(min(data$residuals) - 5, max(data$residuals) + 5)) +  # Adjust limits
geom_smooth(method = 'loess', color = 'blue', se = FALSE, linetype = "solid") +  # Add LOESS curve
annotate("text", x = max(data$Predicted) * 0.05, y = max(data$residuals)*0.5,
label = paste("Mean Residuals:", round(mean(data$residuals), 2)),
color = "black", size = 4.5, hjust = 0)
print(p2)
return(metrics)
}
prediction = compute.prediction.stacked(meta_learner, testing_set, target, training[["ML_models"]], training[["Base_models"]])
evaluate_prediction = function(predicted, observed){
######Metrics
# Calculate RMSE
rmse <- sqrt(mean((observed - predicted)^2))
# Calculate MAE
mae <- mean(abs(observed - predicted))
# Calculate R-squared
ss_res <- sum((observed - predicted) ^ 2)
ss_tot <- sum((observed - mean(observed)) ^ 2)
r_squared <- 1 - (ss_res / ss_tot)
metrics = data.frame(RMSE = rmse,
MAE = mae,
R_square = r_squared)
data <- data.frame(
Actual = observed,
Predicted = predicted
)
# Fit a linear regression model
model <- lm(Actual ~ Predicted, data = data)
# Regression plot
p1 <- ggplot(data, aes(x = Predicted, y = Actual)) +
geom_point(color = 'blue', size = 2, alpha = 0.6) +  # Scatter plot
geom_smooth(method = 'lm', color = 'red', se = FALSE, linetype = "dashed") +  # Regression line
labs(title = 'Regression Plot', x = 'Predicted Values', y = 'Actual Values') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.8,
label = paste("RMSE:", round(rmse, 2)), color = "black", size = 4, hjust = 0) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.7,
label = paste("R-squared:", round(r_squared, 3)), color = "black", size = 4, hjust = 0)
print(p1)
# Residuals analysis
data$residuals <- residuals(model)
p2 <- ggplot(data, aes(x = Predicted, y = residuals)) +
geom_point(color = 'green', alpha = 0.6, size = 2) +  # Residuals scatter plot
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at y=0
labs(title = 'Residuals Plot', x = 'Predicted Values', y = 'Residuals') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
scale_y_continuous(limits = c(min(data$residuals) - 5, max(data$residuals) + 5)) +  # Adjust limits
geom_smooth(method = 'loess', color = 'blue', se = FALSE, linetype = "solid") +  # Add LOESS curve
annotate("text", x = min(data$Predicted) * 0.3, y = max(data$residuals)*0.2,
label = paste("Mean Residuals:", round(mean(data$residuals), 2)),
color = "black", size = 4.5, hjust = 0)
print(p2)
return(metrics)
}
prediction = compute.prediction.stacked(meta_learner, testing_set, target, training[["ML_models"]], training[["Base_models"]])
evaluate_prediction = function(predicted, observed){
######Metrics
# Calculate RMSE
rmse <- sqrt(mean((observed - predicted)^2))
# Calculate MAE
mae <- mean(abs(observed - predicted))
# Calculate R-squared
ss_res <- sum((observed - predicted) ^ 2)
ss_tot <- sum((observed - mean(observed)) ^ 2)
r_squared <- 1 - (ss_res / ss_tot)
metrics = data.frame(RMSE = rmse,
MAE = mae,
R_square = r_squared)
data <- data.frame(
Actual = observed,
Predicted = predicted
)
# Fit a linear regression model
model <- lm(Actual ~ Predicted, data = data)
# Regression plot
p1 <- ggplot(data, aes(x = Predicted, y = Actual)) +
geom_point(color = 'blue', size = 2, alpha = 0.6) +  # Scatter plot
geom_smooth(method = 'lm', color = 'red', se = FALSE, linetype = "dashed") +  # Regression line
labs(title = 'Regression Plot', x = 'Predicted Values', y = 'Actual Values') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.8,
label = paste("RMSE:", round(rmse, 2)), color = "black", size = 4, hjust = 0) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.7,
label = paste("R-squared:", round(r_squared, 3)), color = "black", size = 4, hjust = 0)
print(p1)
# Residuals analysis
data$residuals <- residuals(model)
p2 <- ggplot(data, aes(x = Predicted, y = residuals)) +
geom_point(color = 'green', alpha = 0.6, size = 2) +  # Residuals scatter plot
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at y=0
labs(title = 'Residuals Plot', x = 'Predicted Values', y = 'Residuals') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
scale_y_continuous(limits = c(min(data$residuals) - 5, max(data$residuals) + 5)) +  # Adjust limits
geom_smooth(method = 'loess', color = 'blue', se = FALSE, linetype = "solid") +  # Add LOESS curve
annotate("text", x = min(data$Predicted) * 0.3, y = max(data$residuals)*0.8,
label = paste("Mean Residuals:", round(mean(data$residuals), 2)),
color = "black", size = 4.5, hjust = 0)
print(p2)
return(metrics)
}
prediction = compute.prediction.stacked(meta_learner, testing_set, target, training[["ML_models"]], training[["Base_models"]])
evaluate_prediction = function(predicted, observed){
######Metrics
# Calculate RMSE
rmse <- sqrt(mean((observed - predicted)^2))
# Calculate MAE
mae <- mean(abs(observed - predicted))
# Calculate R-squared
ss_res <- sum((observed - predicted) ^ 2)
ss_tot <- sum((observed - mean(observed)) ^ 2)
r_squared <- 1 - (ss_res / ss_tot)
metrics = data.frame(RMSE = rmse,
MAE = mae,
R_square = r_squared)
data <- data.frame(
Actual = observed,
Predicted = predicted
)
# Fit a linear regression model
model <- lm(Actual ~ Predicted, data = data)
# Regression plot
p1 <- ggplot(data, aes(x = Predicted, y = Actual)) +
geom_point(color = 'blue', size = 2, alpha = 0.6) +  # Scatter plot
geom_smooth(method = 'lm', color = 'red', se = FALSE, linetype = "dashed") +  # Regression line
labs(title = 'Regression Plot', x = 'Predicted Values', y = 'Actual Values') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.8,
label = paste("RMSE:", round(rmse, 2)), color = "black", size = 4, hjust = 0) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.7,
label = paste("R-squared:", round(r_squared, 3)), color = "black", size = 4, hjust = 0)
print(p1)
# Residuals analysis
data$residuals <- residuals(model)
p2 <- ggplot(data, aes(x = Predicted, y = residuals)) +
geom_point(color = 'green', alpha = 0.6, size = 2) +  # Residuals scatter plot
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at y=0
labs(title = 'Residuals Plot', x = 'Predicted Values', y = 'Residuals') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
scale_y_continuous(limits = c(min(data$residuals) - 5, max(data$residuals) + 5)) +  # Adjust limits
geom_smooth(method = 'loess', color = 'blue', se = FALSE, linetype = "solid") +  # Add LOESS curve
annotate("text", x = min(data$Predicted) * 0.3, y = min(data$residuals)*0.8,
label = paste("Mean Residuals:", round(mean(data$residuals), 2)),
color = "black", size = 4.5, hjust = 0)
print(p2)
return(metrics)
}
prediction = compute.prediction.stacked(meta_learner, testing_set, target, training[["ML_models"]], training[["Base_models"]])
evaluate_prediction = function(predicted, observed){
######Metrics
# Calculate RMSE
rmse <- sqrt(mean((observed - predicted)^2))
# Calculate MAE
mae <- mean(abs(observed - predicted))
# Calculate R-squared
ss_res <- sum((observed - predicted) ^ 2)
ss_tot <- sum((observed - mean(observed)) ^ 2)
r_squared <- 1 - (ss_res / ss_tot)
metrics = data.frame(RMSE = rmse,
MAE = mae,
R_square = r_squared)
data <- data.frame(
Actual = observed,
Predicted = predicted
)
# Fit a linear regression model
model <- lm(Actual ~ Predicted, data = data)
# Regression plot
p1 <- ggplot(data, aes(x = Predicted, y = Actual)) +
geom_point(color = 'blue', size = 2, alpha = 0.6) +  # Scatter plot
geom_smooth(method = 'lm', color = 'red', se = FALSE, linetype = "dashed") +  # Regression line
labs(title = 'Regression Plot', x = 'Predicted Values', y = 'Actual Values') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.8,
label = paste("RMSE:", round(rmse, 2)), color = "black", size = 4, hjust = 0) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.7,
label = paste("R-squared:", round(r_squared, 3)), color = "black", size = 4, hjust = 0)
print(p1)
# Residuals analysis
data$residuals <- residuals(model)
p2 <- ggplot(data, aes(x = Predicted, y = residuals)) +
geom_point(color = 'green', alpha = 0.6, size = 2) +  # Residuals scatter plot
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at y=0
labs(title = 'Residuals Plot', x = 'Predicted Values', y = 'Residuals') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
scale_y_continuous(limits = c(min(data$residuals) - 5, max(data$residuals) + 5)) +  # Adjust limits
geom_smooth(method = 'loess', color = 'blue', se = FALSE, linetype = "solid") +  # Add LOESS curve
annotate("text", x = min(data$Predicted) * 0.3, y = min(data$residuals)*0.2,
label = paste("Mean Residuals:", round(mean(data$residuals), 2)),
color = "black", size = 4.5, hjust = 0)
print(p2)
return(metrics)
}
prediction = compute.prediction.stacked(meta_learner, testing_set, target, training[["ML_models"]], training[["Base_models"]])
evaluate_prediction = function(predicted, observed){
######Metrics
# Calculate RMSE
rmse <- sqrt(mean((observed - predicted)^2))
# Calculate MAE
mae <- mean(abs(observed - predicted))
# Calculate R-squared
ss_res <- sum((observed - predicted) ^ 2)
ss_tot <- sum((observed - mean(observed)) ^ 2)
r_squared <- 1 - (ss_res / ss_tot)
metrics = data.frame(RMSE = rmse,
MAE = mae,
R_square = r_squared)
data <- data.frame(
Actual = observed,
Predicted = predicted
)
# Fit a linear regression model
model <- lm(Actual ~ Predicted, data = data)
# Regression plot
p1 <- ggplot(data, aes(x = Predicted, y = Actual)) +
geom_point(color = 'blue', size = 2, alpha = 0.6) +  # Scatter plot
geom_smooth(method = 'lm', color = 'red', se = FALSE, linetype = "dashed") +  # Regression line
labs(title = 'Regression Plot', x = 'Predicted Values', y = 'Actual Values') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.8,
label = paste("RMSE:", round(rmse, 2)), color = "black", size = 4, hjust = 0) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.7,
label = paste("R-squared:", round(r_squared, 3)), color = "black", size = 4, hjust = 0)
print(p1)
# Residuals analysis
data$residuals <- residuals(model)
p2 <- ggplot(data, aes(x = Predicted, y = residuals)) +
geom_point(color = 'green', alpha = 0.6, size = 2) +  # Residuals scatter plot
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at y=0
labs(title = 'Residuals Plot', x = 'Predicted Values', y = 'Residuals') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
scale_y_continuous(limits = c(min(data$residuals) - 5, max(data$residuals) + 5)) +  # Adjust limits
geom_smooth(method = 'loess', color = 'blue', se = FALSE, linetype = "solid") +  # Add LOESS curve
annotate("text", x = min(data$Predicted) * 0.3, y = max(data$residuals)*0.95,
label = paste("Mean Residuals:", round(mean(data$residuals), 2)),
color = "black", size = 4.5, hjust = 0)
print(p2)
return(metrics)
}
prediction = compute.prediction.stacked(meta_learner, testing_set, target, training[["ML_models"]], training[["Base_models"]])
evaluate_prediction = function(predicted, observed){
######Metrics
# Calculate RMSE
rmse <- sqrt(mean((observed - predicted)^2))
# Calculate MAE
mae <- mean(abs(observed - predicted))
# Calculate R-squared
ss_res <- sum((observed - predicted) ^ 2)
ss_tot <- sum((observed - mean(observed)) ^ 2)
r_squared <- 1 - (ss_res / ss_tot)
metrics = data.frame(RMSE = rmse,
MAE = mae,
R_square = r_squared)
data <- data.frame(
Actual = observed,
Predicted = predicted
)
# Fit a linear regression model
model <- lm(Actual ~ Predicted, data = data)
# Regression plot
p1 <- ggplot(data, aes(x = Predicted, y = Actual)) +
geom_point(color = 'blue', size = 2, alpha = 0.6) +  # Scatter plot
geom_smooth(method = 'lm', color = 'red', se = FALSE, linetype = "dashed") +  # Regression line
labs(title = 'Regression Plot', x = 'Predicted Values', y = 'Actual Values') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.8,
label = paste("RMSE:", round(rmse, 2)), color = "black", size = 4, hjust = 0) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.7,
label = paste("R-squared:", round(r_squared, 3)), color = "black", size = 4, hjust = 0)
print(p1)
# Residuals analysis
data$residuals <- residuals(model)
p2 <- ggplot(data, aes(x = Predicted, y = residuals)) +
geom_point(color = 'green', alpha = 0.6, size = 2) +  # Residuals scatter plot
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at y=0
labs(title = 'Residuals Plot',
x = 'Predicted Values',
y = 'Residuals',
subtitle = paste("Mean of Residuals =", round(mean_residuals, 2))) +  # Mean as subtitle
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12, face = "italic"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
print(p2)
return(metrics)
}
prediction = compute.prediction.stacked(meta_learner, testing_set, target, training[["ML_models"]], training[["Base_models"]])
evaluate_prediction = function(predicted, observed){
######Metrics
# Calculate RMSE
rmse <- sqrt(mean((observed - predicted)^2))
# Calculate MAE
mae <- mean(abs(observed - predicted))
# Calculate R-squared
ss_res <- sum((observed - predicted) ^ 2)
ss_tot <- sum((observed - mean(observed)) ^ 2)
r_squared <- 1 - (ss_res / ss_tot)
metrics = data.frame(RMSE = rmse,
MAE = mae,
R_square = r_squared)
data <- data.frame(
Actual = observed,
Predicted = predicted
)
# Fit a linear regression model
model <- lm(Actual ~ Predicted, data = data)
# Regression plot
p1 <- ggplot(data, aes(x = Predicted, y = Actual)) +
geom_point(color = 'blue', size = 2, alpha = 0.6) +  # Scatter plot
geom_smooth(method = 'lm', color = 'red', se = FALSE, linetype = "dashed") +  # Regression line
labs(title = 'Regression Plot', x = 'Predicted Values', y = 'Actual Values') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.8,
label = paste("RMSE:", round(rmse, 2)), color = "black", size = 4, hjust = 0) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.7,
label = paste("R-squared:", round(r_squared, 3)), color = "black", size = 4, hjust = 0)
print(p1)
# Residuals analysis
data$residuals <- residuals(model)
p2 <- ggplot(data, aes(x = Predicted, y = residuals)) +
geom_point(color = 'green', alpha = 0.6, size = 2) +  # Residuals scatter plot
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at y=0
labs(title = 'Residuals Plot',
x = 'Predicted Values',
y = 'Residuals',
subtitle = paste("Mean of Residuals =", round(mean(data$residuals), 2))) +  # Mean as subtitle
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12, face = "italic"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
print(p2)
return(metrics)
}
prediction = compute.prediction.stacked(meta_learner, testing_set, target, training[["ML_models"]], training[["Base_models"]])
evaluate_prediction = function(predicted, observed){
######Metrics
# Calculate RMSE
rmse <- sqrt(mean((observed - predicted)^2))
# Calculate MAE
mae <- mean(abs(observed - predicted))
# Calculate R-squared
ss_res <- sum((observed - predicted) ^ 2)
ss_tot <- sum((observed - mean(observed)) ^ 2)
r_squared <- 1 - (ss_res / ss_tot)
metrics = data.frame(RMSE = rmse,
MAE = mae,
R_square = r_squared)
data <- data.frame(
Actual = observed,
Predicted = predicted
)
# Fit a linear regression model
model <- lm(Actual ~ Predicted, data = data)
# Regression plot
p1 <- ggplot(data, aes(x = Predicted, y = Actual)) +
geom_point(color = 'blue', size = 2, alpha = 0.6) +  # Scatter plot
geom_smooth(method = 'lm', color = 'red', se = FALSE, linetype = "dashed") +  # Regression line
labs(title = 'Regression Plot', x = 'Predicted Values', y = 'Actual Values') +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.8,
label = paste("RMSE:", round(rmse, 2)), color = "black", size = 4, hjust = 0) +
annotate("text", x = max(data$Predicted) * 0.1, y = max(data$Actual) * 0.7,
label = paste("R-squared:", round(r_squared, 3)), color = "black", size = 4, hjust = 0)
print(p1)
# Residuals analysis
data$residuals <- residuals(model)
p2 <- ggplot(data, aes(x = Predicted, y = residuals)) +
geom_point(color = 'green', alpha = 0.6, size = 2) +  # Residuals scatter plot
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at y=0
labs(title = 'Residuals Plot',
x = 'Predicted Values',
y = 'Residuals',
subtitle = paste("Mean of Residuals =", round(mean(data$residuals), 2))) +  # Mean as subtitle
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
print(p2)
return(metrics)
}
prediction = compute.prediction.stacked(meta_learner, testing_set, target, training[["ML_models"]], training[["Base_models"]])
# Generate 60 samples with 10 features (random normal values)
features <- as.data.frame(matrix(rnorm(4000 * 10), nrow = 4000, ncol = 10))
# Name the feature columns
colnames(features) <- paste0("feature_", 1:10)
# Generate the target column (random normal values)
features$target <- rnorm(4000)
View(features)
x = compute.ML(features, "target", 0.8, stack = T, seed = 123, file_name = "Test")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages(kernlab)
install.packages("kernlab")
install.packages("~/Downloads/kernlab_0.9-33.tar.gz", repos = NULL, type = "source")
install.packages("mgcv")
install.packages("~/Downloads/mgcv_1.9-1.tar.gz", repos = NULL, type = "source")
install.packages("MASS")
install.packages("~/Downloads/MASS_7.3-61.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/MASS_7.3-53.tar.gz", repos = NULL, type = "source")
